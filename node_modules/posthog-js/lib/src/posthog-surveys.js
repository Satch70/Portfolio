import { SURVEYS } from './constants';
var PostHogSurveys = /** @class */ (function () {
    function PostHogSurveys(instance) {
        this.instance = instance;
    }
    PostHogSurveys.prototype.getSurveys = function (callback, forceReload) {
        var _this = this;
        if (forceReload === void 0) { forceReload = false; }
        var existingSurveys = this.instance.get_property(SURVEYS);
        if (!existingSurveys || forceReload) {
            this.instance._send_request("".concat(this.instance.config.api_host, "/api/surveys/?token=").concat(this.instance.config.token), {}, { method: 'GET' }, function (response) {
                var _a;
                var _b;
                var surveys = response.surveys || [];
                (_b = _this.instance.persistence) === null || _b === void 0 ? void 0 : _b.register((_a = {}, _a[SURVEYS] = surveys, _a));
                return callback(surveys);
            });
        }
        else {
            return callback(existingSurveys);
        }
    };
    PostHogSurveys.prototype.getActiveMatchingSurveys = function (callback, forceReload) {
        var _this = this;
        if (forceReload === void 0) { forceReload = false; }
        this.getSurveys(function (surveys) {
            var activeSurveys = surveys.filter(function (survey) {
                return !!(survey.start_date && !survey.end_date);
            });
            var conditionMatchedSurveys = activeSurveys.filter(function (survey) {
                var _a, _b;
                if (!survey.conditions) {
                    return true;
                }
                var urlCheck = ((_a = survey.conditions) === null || _a === void 0 ? void 0 : _a.url)
                    ? window.location.href.indexOf(survey.conditions.url) > -1
                    : true;
                var selectorCheck = ((_b = survey.conditions) === null || _b === void 0 ? void 0 : _b.selector)
                    ? document.querySelector(survey.conditions.selector)
                    : true;
                return urlCheck && selectorCheck;
            });
            var targetingMatchedSurveys = conditionMatchedSurveys.filter(function (survey) {
                if (!survey.linked_flag_key && !survey.targeting_flag_key) {
                    return true;
                }
                var linkedFlagCheck = survey.linked_flag_key
                    ? _this.instance.featureFlags.isFeatureEnabled(survey.linked_flag_key)
                    : true;
                var targetingFlagCheck = survey.targeting_flag_key
                    ? _this.instance.featureFlags.isFeatureEnabled(survey.targeting_flag_key)
                    : true;
                return linkedFlagCheck && targetingFlagCheck;
            });
            return callback(targetingMatchedSurveys);
        }, forceReload);
    };
    return PostHogSurveys;
}());
export { PostHogSurveys };
//# sourceMappingURL=posthog-surveys.js.map