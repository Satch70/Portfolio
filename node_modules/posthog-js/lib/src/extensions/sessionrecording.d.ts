import { rrwebRecord } from './sessionrecording-utils';
import { PostHog } from '../posthog-core';
import { DecideResponse } from '../types';
import { type eventWithTime, type listenerHandler } from '@rrweb/types';
export declare const RECORDING_IDLE_ACTIVITY_TIMEOUT_MS: number;
export declare const RECORDING_MAX_EVENT_SIZE: number;
export declare const RECORDING_BUFFER_TIMEOUT = 2000;
export declare const SESSION_RECORDING_BATCH_KEY = "recordings";
export declare class SessionRecording {
    private instance;
    private emit;
    private endpoint;
    private windowId;
    private sessionId;
    private lastActivityTimestamp;
    private flushBufferTimer?;
    private buffer?;
    private mutationRateLimiter?;
    captureStarted: boolean;
    snapshots: any[];
    stopRrweb: listenerHandler | undefined;
    receivedDecide: boolean;
    rrwebRecord: rrwebRecord | undefined;
    recorderVersion?: string;
    isIdle: boolean;
    constructor(instance: PostHog);
    private getSessionManager;
    startRecordingIfEnabled(): void;
    started(): boolean;
    stopRecording(): void;
    isRecordingEnabled(): boolean;
    isConsoleLogCaptureEnabled(): boolean;
    getRecordingVersion(): any;
    afterDecideResponse(response: DecideResponse): void;
    log(message: string, level?: 'log' | 'warn' | 'error'): void;
    private startCaptureAndTrySendingQueuedSnapshots;
    private _startCapture;
    private _isInteractiveEvent;
    private _updateWindowAndSessionIds;
    private _tryTakeFullSnapshot;
    private _onScriptLoaded;
    onRRwebEmit(rawEvent: eventWithTime): void;
    private _maskUrl;
    private _flushBuffer;
    private _captureSnapshotBuffered;
    private _captureSnapshot;
}
