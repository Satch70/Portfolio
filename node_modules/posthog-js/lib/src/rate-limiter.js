import { logger } from './utils';
var oneMinuteInMilliseconds = 60 * 1000;
var RateLimiter = /** @class */ (function () {
    function RateLimiter() {
        var _this = this;
        this.limits = {};
        this.checkForLimiting = function (xmlHttpRequest) {
            try {
                var response = JSON.parse(xmlHttpRequest.responseText);
                var quotaLimitedProducts = response.quota_limited || [];
                quotaLimitedProducts.forEach(function (batchKey) {
                    logger.log("[PostHog RateLimiter] ".concat(batchKey || 'events', " is quota limited."));
                    _this.limits[batchKey] = new Date().getTime() + oneMinuteInMilliseconds;
                });
            }
            catch (e) {
                logger.error(e);
                return;
            }
        };
    }
    RateLimiter.prototype.isRateLimited = function (batchKey) {
        var retryAfter = this.limits[batchKey || 'events'] || false;
        if (retryAfter === false) {
            return false;
        }
        return new Date().getTime() < retryAfter;
    };
    return RateLimiter;
}());
export { RateLimiter };
//# sourceMappingURL=rate-limiter.js.map