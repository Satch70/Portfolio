{"version":3,"file":"rate-limiter.js","sourceRoot":"","sources":["../../src/rate-limiter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAA;AAEhC,IAAM,uBAAuB,GAAG,EAAE,GAAG,IAAI,CAAA;AAMzC;IAAA;QAAA,iBAyBC;QAxBG,WAAM,GAA2B,EAAE,CAAA;QAW5B,qBAAgB,GAAG,UAAC,cAA8B;YACrD,IAAI;gBACA,IAAM,QAAQ,GAAoB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,YAAY,CAAC,CAAA;gBACzE,IAAM,oBAAoB,GAAG,QAAQ,CAAC,aAAa,IAAI,EAAE,CAAA;gBACzD,oBAAoB,CAAC,OAAO,CAAC,UAAC,QAAQ;oBAClC,MAAM,CAAC,GAAG,CAAC,gCAAyB,QAAQ,IAAI,QAAQ,uBAAoB,CAAC,CAAA;oBAC7E,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,uBAAuB,CAAA;gBAC1E,CAAC,CAAC,CAAA;aACL;YAAC,OAAO,CAAC,EAAE;gBACR,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;gBACf,OAAM;aACT;QACL,CAAC,CAAA;IACL,CAAC;IAtBU,mCAAa,GAApB,UAAqB,QAA4B;QAC7C,IAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,KAAK,CAAA;QAE7D,IAAI,UAAU,KAAK,KAAK,EAAE;YACtB,OAAO,KAAK,CAAA;SACf;QACD,OAAO,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,UAAU,CAAA;IAC5C,CAAC;IAeL,kBAAC;AAAD,CAAC,AAzBD,IAyBC","sourcesContent":["import { logger } from './utils'\n\nconst oneMinuteInMilliseconds = 60 * 1000\n\ninterface CaptureResponse {\n    quota_limited?: string[]\n}\n\nexport class RateLimiter {\n    limits: Record<string, number> = {}\n\n    public isRateLimited(batchKey: string | undefined): boolean {\n        const retryAfter = this.limits[batchKey || 'events'] || false\n\n        if (retryAfter === false) {\n            return false\n        }\n        return new Date().getTime() < retryAfter\n    }\n\n    public checkForLimiting = (xmlHttpRequest: XMLHttpRequest): void => {\n        try {\n            const response: CaptureResponse = JSON.parse(xmlHttpRequest.responseText)\n            const quotaLimitedProducts = response.quota_limited || []\n            quotaLimitedProducts.forEach((batchKey) => {\n                logger.log(`[PostHog RateLimiter] ${batchKey || 'events'} is quota limited.`)\n                this.limits[batchKey] = new Date().getTime() + oneMinuteInMilliseconds\n            })\n        } catch (e) {\n            logger.error(e)\n            return\n        }\n    }\n}\n"]}